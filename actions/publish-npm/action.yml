name: Publish to NPM
description: Publish the package to the NPM registry
inputs:
  version:
    description: The type of version to release.
  tag:
    description: The tag to publish to on NPM.
  token:
    description: The NPM authentication token required to publish.
  github-token:
    description: The GitHub token required to push to the repository.
    required: false

runs:
  using: 'composite'
  steps:
    # Log the input from GitHub Actions for easy traceability
    - name: Log Inputs
      run: |
        echo "Version: ${{ inputs.version }}"
        echo "Tag: ${{ inputs.tag }}"
      shell: bash

    - name: Checkout Code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0
        token: ${{ inputs.github-token }}

    - name: Get Core Dependencies
      uses: stenciljs/.github/actions/get-core-dependencies@main

    - name: Get Project Name
      id: repo-name
      run: |
        REPO_NAME=${GITHUB_REPOSITORY#*/}
        echo "REPO_NAME=$REPO_NAME" >> $GITHUB_OUTPUT
        echo "Repository name: $REPO_NAME"        
      shell: bash

    - name: Download Build Archive
      uses: stenciljs/.github/actions/download-archive@main
      with:
        name: stencil-${{ steps.repo-name.outputs.REPO_NAME }}
        path: .
        filename: stencil-${{ steps.repo-name.outputs.REPO_NAME }}-build.zip

    # Remove the ZIP file after we've extracted it - we don't want this committed back to the repo
    - name: Delete The Archive ZIP File
      run: rm stencil-${{ steps.repo-name.outputs.REPO_NAME }}-build.zip
      shell: bash

    - name: Configure Git
      if: inputs.tag == 'latest'
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
      shell: bash

    - name: Bump Version
      if: inputs.tag == 'dev'
      run: npm version --no-git-tag-version ${{ inputs.version }} --tag-version-prefix="v" --message "v%s"
      shell: bash

    - name: Bump Version
      if: inputs.tag == 'latest'
      run: npm version ${{ inputs.version }} --tag-version-prefix="v" --message "v%s"
      shell: bash
    
    - name: Get Tag Name
      id: package-version
      if: inputs.tag == 'latest'
      run: |
        PKG_JSON_VERSION=v$(cat package.json | jq -r '.version')
        echo "PKG_JSON_VERSION=$PKG_JSON_VERSION" >> $GITHUB_OUTPUT
      shell: bash

    - name: Create Changelog
      if: inputs.tag == 'latest'
      run: |
        # Download the git-conventional-commits config file
        curl -o git-conventional-commits.yml https://raw.githubusercontent.com/stenciljs/.github/main/.github/git-conventional-commits.yml

        LAST_TAG=$(git describe --tags --abbrev=0)
        echo "Create Changelog $LAST_TAG..HEAD"
        git log \
          --pretty=format:"%h %ad %s [%an]" \
          --date=short \
          $LAST_TAG..HEAD \
          | npx git-conventional-commits changelog \
          --config ./git-conventional-commits.yml \
          --commit ${{ steps.package-version.outputs.PKG_JSON_VERSION }}
          > CHANGELOG.md
        cat CHANGELOG.md

        # Remove the git-conventional-commits config file again
        rm ./git-conventional-commits.yml
      shell: bash

    - name: Push Version
      if: inputs.tag == 'latest'
      run: git push origin main
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
  
    - name: Push Release
      if: inputs.tag == 'latest'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      with:
        body: $(cat CHANGELOG.md)
        generate_release_notes: true
        make_latest: true
        tag_name: ${{ steps.package-version.outputs.PKG_JSON_VERSION }}

    # Log the git diff for easy debugging
    - name: Log Generated Changes
      if: inputs.tag == 'dev'
      run: git --no-pager diff
      shell: bash

    # Log the git status for easy debugging
    - name: Log Status
      run: git status
      shell: bash

    - name: Prepare NPM Token
      run: echo //registry.npmjs.org/:_authToken=${NPM_TOKEN} > .npmrc
      shell: bash
      env:
        NPM_TOKEN: ${{ inputs.token }}

    - name: Publish to NPM
      run: npm publish --tag ${{ inputs.tag }} --provenance
      shell: bash
