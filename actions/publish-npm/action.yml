name: Publish to NPM
description: Publish the package to the NPM registry
inputs:
  version:
    description: The type of version to release.
  tag:
    description: The tag to publish to on NPM.
  token:
    description: The NPM authentication token required to publish.
  github-token:
    description: The GitHub token required to push to the repository.
    required: false
  working-directory:
    description: The working directory where the package is located.
    required: false
    default: '.'
  skip-setup:
    description: Skip the setup steps.
    required: false
    default: "no"

runs:
  using: 'composite'
  steps:
    # Log the input from GitHub Actions for easy traceability
    - name: Log Inputs
      run: |
        echo "Version: ${{ inputs.version }}"
        echo "Tag: ${{ inputs.tag }}"
      working-directory: ${{ inputs.working-directory }}
      shell: bash

    - name: Checkout Code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0
        token: ${{ inputs.github-token }}

    - name: Get Core Dependencies
      if: inputs.skip-setup == 'no'
      uses: stenciljs/.github/actions/get-core-dependencies@main

    - name: Get Project Name
      id: repo-name
      run: |
        REPO_NAME=${GITHUB_REPOSITORY#*/}
        echo "REPO_NAME=$REPO_NAME" >> $GITHUB_OUTPUT
        echo "Repository name: $REPO_NAME"        
      working-directory: ${{ inputs.working-directory }}
      shell: bash

    - name: Download Build Archive
      if: inputs.skip-setup == 'no'
      uses: stenciljs/.github/actions/download-archive@main

    - name: Configure Git
      if: inputs.tag == 'latest'
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
      working-directory: ${{ inputs.working-directory }}
      shell: bash

    - name: Bump Version
      if: inputs.tag == 'dev'
      run: npm version --no-git-tag-version ${{ inputs.version }} --tag-version-prefix="v" --message "v%s"
      working-directory: ${{ inputs.working-directory }}
      shell: bash

    - name: Bump Version
      if: inputs.tag == 'latest'
      run: npm version ${{ inputs.version }} --tag-version-prefix="v" --message "v%s"
      working-directory: ${{ inputs.working-directory }}
      shell: bash
    
    - name: Get Tag Name
      id: package-version
      if: inputs.tag == 'latest'
      run: |
        PKG_JSON_VERSION=v$(cat package.json | jq -r '.version')
        echo "PKG_JSON_VERSION=$PKG_JSON_VERSION" >> $GITHUB_OUTPUT
      working-directory: ${{ inputs.working-directory }}
      shell: bash

    - name: Create Changelog
      if: inputs.tag == 'latest'
      run: |
        # Download the git-conventional-commits config file
        curl -o git-conventional-commits.yml https://raw.githubusercontent.com/stenciljs/.github/refs/heads/main/git-conventional-commits.yml
        cat git-conventional-commits.yml

        # Check if there are any tags, and handle initial release case
        if git tag -l | grep -q .; then
          # Tags exist - use the most recent tag
          LAST_TAG=$(git tag --sort=-creatordate | head -n 1)
          echo "Create Changelog $LAST_TAG..HEAD"

          # Show git log for debugging
          echo "Git log output:"
          git log $LAST_TAG..HEAD --pretty=format:"%h %ad %s [%an]" --date=short
          
          # Use npx git-conventional-commits with just the necessary parameters
          # The tool will handle git operations itself
          npx git-conventional-commits changelog --config ./git-conventional-commits.yml --commit ${{ steps.package-version.outputs.PKG_JSON_VERSION }} > CHANGELOG.md
        else
          # No tags exist - this is the initial release
          echo "Initial release - creating initial changelog"
          # Create changelog without creating a commit
          git log --pretty=format:"%h %ad %s [%an]" --date=short | npx git-conventional-commits changelog --config ./git-conventional-commits.yml --commit ${{ steps.package-version.outputs.PKG_JSON_VERSION }} --initial-version > CHANGELOG.md
          
          # If the generated changelog is empty or minimal, create a manual one with more details
          if [ ! -s CHANGELOG.md ] || [ $(wc -l < CHANGELOG.md) -lt 5 ]; then
            echo "# ${{ steps.package-version.outputs.PKG_JSON_VERSION }} ($(date +%Y-%m-%d))" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "## ðŸŽ‰ Initial Release" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "This is the first release of the package." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "### Commits" >> CHANGELOG.md
            git log --pretty=format:"* %h %s" --no-merges >> CHANGELOG.md
          fi
          
          # For initial release, amend the version commit to include the changelog
          git add CHANGELOG.md
          git commit --amend --no-edit
        fi

        # Remove the git-conventional-commits config file again
        rm ./git-conventional-commits.yml
      shell: bash

    - name: Push Version
      if: inputs.tag == 'latest'
      run: git push origin main
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Display Changelog
      run: cat CHANGELOG.md
      working-directory: ${{ inputs.working-directory }}
      shell: bash

    - name: Push Release
      if: inputs.tag == 'latest'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      with:
        body_path: ${{ inputs.working-directory }}/CHANGELOG.md
        generate_release_notes: true
        make_latest: true
        tag_name: ${{ steps.package-version.outputs.PKG_JSON_VERSION }}

    # Log the git diff for easy debugging
    - name: Log Generated Changes
      if: inputs.tag == 'dev'
      run: git --no-pager diff
      working-directory: ${{ inputs.working-directory }}
      shell: bash

    # Log the git status for easy debugging
    - name: Log Status
      run: git status
      working-directory: ${{ inputs.working-directory }}
      shell: bash

    - name: Prepare NPM Token
      run: echo //registry.npmjs.org/:_authToken=${NPM_TOKEN} > .npmrc
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      env:
        NPM_TOKEN: ${{ inputs.token }}

    - name: Publish to NPM
      run: npm publish --tag ${{ inputs.tag }} --provenance
      working-directory: ${{ inputs.working-directory }}
      shell: bash
